---
import { Icon } from "astro-icon";
import Layout from "@layouts/main.astro";
---
<Layout>
	<div class="main">

		<div id="drop-area">
			<span class="upload-icon" data-event="deactive">
				<Icon name="heroicons:arrow-up-tray" />
			</span>
			<span class="upload-icon" data-event="active">
				<Icon name="heroicons:fire" />
			</span>
			<p data-event="deactive">拖放文件到此上传</p>
			<p data-event="active">松手以上传</p>
			<div class="file-chooser-con" data-event="deactive">
				<label for="file-chooser">或点此选择文件</label>
				<input
				  type="file"
				  id="file-chooser"
				  name="file-chooser"
				  multiple />
			  </div>
		</div>

		<div id="FilesPreview">
			<div class="file prototype">
				<div class="info">
					<div class="file-detail">
						<div class="file-name">114514.mp4</div>
						<div class="file-info">
							<span class="file-size">180.81 MiB</span>
							(<span class="file-progress">94.87%</span>)
						</div>
					</div>
					<div class="progress-con">
						<div class="progress"></div>
						<div class="file-progress">94.87%</div>
					</div>
					<code class="file-url">请先上传文件。</code>
				</div>
				<div class="actions">
					<button onclick="UploadByUUID(this.parentElement.parentElement.getAttribute('UUID'));">
						<Icon name="heroicons:arrow-up-tray" />
						<span class="tip">Upload</span>
					</button>
					<button onclick="RemoveByUUID(this.parentElement.parentElement);">
						<Icon name="heroicons:x-circle" />
						<span class="tip">Cancel</span>
					</button>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style lang="scss">
	div.main {
		width: 65%;
	    border: none;
    	padding: 28px 32px;
		margin: 10vh 0;
	    border-radius: 32px;
    	transition: all 0.3s ease;
    	background-color: rgba(40, 41, 42, 0.5);
		backdrop-filter: blur(18px);
		#FilesPreview {
			.file {
				display: flex;
				align-items: center;
				margin-top: 12px;

				.info {
					width: 100%;
					margin-right: 10px;
					box-sizing: border-box;
					.file-detail {
						display: flex;
						justify-content: space-between;
						margin-bottom: 6px;
						.file-progress {
							font-weight: bolder;
						}
					}
					.progress-con {
						display: block;
						height: 12px;
						widows: 100%;
						border-radius: 15px;
						overflow: hidden;
						background-color: #1f1f1f;
						.progress {
							width: 94.87%;
							height: 100%;
							background-color: aqua;
							transition: width 0.1s linear;
						}
					}
				}
				.actions {
					display: flex;
					gap: 4px;
					writing-mode: sideways-rl;
					button {
						padding: 10px 7px;
					}
					.tip {
						display: none;
					}
				}
				&.prototype {
					display: none !important;
				}
			}
			@media screen and (max-width: 720px) {
				.file {
					display: block;
					.actions {
						display: block;
  						writing-mode: initial;
						display: flex;
  						justify-content: space-around;

						button {
							padding: 10px 14px;
							margin-top: 10px;
							[astro-icon] {
								width: 22px;
								height: 22px;
								vertical-align: -0.3125rem;
							}
							.tip {
								display: inline-block;
								margin-left: 6px;
							}
						}
					}
				}
			}
		}
		#drop-area {
			text-align: center;
  			padding: 20px 24px;
			margin-bottom: 12px;
			width: 100%;
			max-width: 640px;
			box-sizing: border-box;
			margin: auto;
  			transition: all 0.15s ease 0s;

			border-color: #ac81de;
			border-width: 3px;
			border-style: dashed;
	    	border-radius: 24px;
		
			background-clip: padding-box;
			background-color: #1f1f1f;

			[data-event="active"] {
				display: none;
			}
			[data-event="deactive"] {
				display: block;
			}

			.file-chooser-con {
				label {
					display: inline-block;
					border-style: solid;
  					border-width: 1px;
  					border-radius: 6px;
  					padding: 4px 8px;
  					border-color: #404040;
  					background-color: #232323;
				}
				input {
					display: none;
				}
			}

			> * {
				margin: 0;
				&:not(:last-child) {
					margin-bottom: 15px;
				}
			}

			&.active {
				transform: scale(1.025);
				border-style: solid;

				[data-event="active"] {
					display: block;
				}
				[data-event="deactive"] {
					display: none;
				}
			}
			[astro-icon] {
				height: 32px;
    			width: 32px;
			}
		}
	}
</style>

<script lang="javascript">
	/* @ts-ignore */
	window.FileArr = {};
	let BackendAPI = 
		location.hostname === "localhost"
			? "http://localhost:8788"
			: `https://${location.hostname}${location.port}`;

	const DropArea = document.getElementById("drop-area");

	window.RemoveByUUID = function (Element) {
		let UUID = Element.getAttribute("UUID");
		delete FileReader[UUID];
		try {
			Element.remove()
		} catch (err) {
			Element.innerHTML = "";
			Element.style.display = "none";
		}
	}
	window.UploadByUUID = function (UUID) {
		console.log(FileArr[UUID])
		let TargetEl = document.querySelector(`div[uuid="${UUID}"]`);
		TargetEl.querySelector(".file-progress").innerText = "0%"
		TargetEl.querySelector(".progress").style.width = "0%"

		const form = new FormData()
		form.append(
			"photo", 
			FileArr[UUID]
		)

		let xhr = new XMLHttpRequest();
		xhr.open("POST", `${BackendAPI}/upload`);


		xhr.upload.addEventListener("progress", (event) => {
			let Progress = ( (event.loaded / event.total) * 100 ).toFixed(2) + "%"
      		console.log(`Uploading (${Progress})...`);
			TargetEl.querySelector(".file-progress").innerText = Progress;
			TargetEl.querySelector(".progress").style.width = Progress;
			if (Progress === "100.00%") {
				TargetEl.querySelector(".file-progress").innerText = "Processing";
				return;
			}
    	});

		xhr.addEventListener("load", function () {
			TargetEl.querySelector(".file-progress").innerText = "Done"
			TargetEl.querySelector("code.file-url").innerText = `${BackendAPI}${JSON.parse(this.response)[0].src}`
		})

  		xhr.send(form);
	}
	function toReadableSize (bytes) {
  		const units = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
  		let i = 0;
  		while (bytes >= 1024 && i < units.length - 1) {
    		bytes /= 1024;
    		i++;
  		}
  		return `${bytes.toFixed(2)} ${units[i]}`;
	}
	function uuidv4() {
		function to16ByteStr (Start, End) {
			return `${Bytes.slice(Start, End).toString().replace(/,/gi, "")}`
		}
  		let Bytes = function () {
			let units = new Uint8Array(20);
  			crypto.getRandomValues(units);
			let BytesArray = [];
			for (let i in units) {
				BytesArray.push(units[i].toString(16).padStart(2, "0"));
			}
			return BytesArray;
		}()
  		return `${to16ByteStr(0, 4)}-${to16ByteStr(5, 7)}-${to16ByteStr(8, 10)}-${to16ByteStr(11, 13)}-${to16ByteStr(14, 20)}`;
	}

	function appendFilePreview (files) {
		for (let file of files) {
				const { name, size } = file;
				console.log(toReadableSize(size))
				let FileUUID = uuidv4();
				window.FileArr[FileUUID] = file;

				let FilePreviewEl = document.querySelector("#FilesPreview .file.prototype").cloneNode(true);
				FilePreviewEl.classList.remove("prototype")
				FilePreviewEl.setAttribute("UUID", FileUUID)
				FilePreviewEl.querySelector(".file-name").innerText = name;
				FilePreviewEl.querySelector(".file-size").innerText = toReadableSize(size);
				FilePreviewEl.querySelector(".file-progress").innerText = "0%";
				FilePreviewEl.querySelector(".progress").style.width = "0%";

				document.querySelector("#FilesPreview").appendChild(FilePreviewEl);
			}
	}


	function handleEvent(event) {
		// 阻止事件的默认行为
		event.preventDefault();
		if (event.type === "drop") {
			// 文件进入并松开鼠标,文件边框恢复正常
			DropArea.classList.remove("active")
			appendFilePreview(event.dataTransfer.files);
		} else if (event.type === "dragleave") {
			// out
			DropArea.classList.remove("active")
		} else {
			//in
			DropArea.classList.add("active")
		}
	}
	// 拖拽事件绑定
	DropArea.addEventListener("dragenter", handleEvent);
	DropArea.addEventListener("dragover", handleEvent);
	DropArea.addEventListener("drop", handleEvent);
	DropArea.addEventListener("dragleave", handleEvent);



	let FileChooser = document.querySelector("input#file-chooser");
	FileChooser.addEventListener("change", async function () {
		console.log(this.files)

		appendFilePreview(this.files);
	})

	async function Upload (File) {
		const form = new FormData()
		form.append(
			"photo", 
			File
		)
		let Respond = await fetch(`${BackendAPI}/upload`, {
    		method: "POST",
    		body: form
  		})
    	.then(result => result.json())
    	.then((result) => {
      		if (result.error) {
        		throw result.error
			}
			return result
      	})
		console.log(Respond)
	}
	
</script>
